import heapq

class Node:
    def __init__(self, x, y, cost=0, heuristic=0, parent=None):
        self.x = x
        self.y = y
        self.cost = cost
        self.heuristic = heuristic
        self.parent = parent

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def heuristic(a, b):
    return abs(a.x - b.x) + abs(a.y - b.y)

def a_star_search(grid, start, goal):
    open_list = []
    heapq.heappush(open_list, Node(start[0], start[1], 0, heuristic(Node(*start), Node(*goal))))
    closed_set = set()

    while open_list:
        current_node = heapq.heappop(open_list)

        if (current_node.x, current_node.y) in closed_set:
            continue

        if (current_node.x, current_node.y) == goal:
            path = []
            while current_node:
                path.append((current_node.x, current_node.y))
                current_node = current_node.parent
            return path[::-1]

        closed_set.add((current_node.x, current_node.y))

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            x, y = current_node.x + dx, current_node.y + dy

            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0:
                neighbor = Node(x, y, current_node.cost + 1, heuristic(Node(x, y), Node(*goal)), current_node)

                if (neighbor.x, neighbor.y) in closed_set:
                    continue

                heapq.heappush(open_list, neighbor)

    return None

def print_grid_with_path(grid, path):
    for x, y in path:
        grid[x][y] = '*'

    for row in grid:
        print(" ".join(str(cell) for cell in row))

if __name__ == "__main__":
    grid = [
        [0, 1, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0]
    ]

    start = (0, 0)
    goal = (4, 4)

    path = a_star_search(grid, start, goal)
    if path:
        print("Path found:")
        print(path)
        print_grid_with_path(grid, path)
    else:
        print("No path found")
