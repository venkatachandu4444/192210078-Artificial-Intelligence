class GameTree:
    def __init__(self, value=None, children=None):
        self.value = value
        self.children = children if children is not None else []

def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player):
    if depth == 0 or not node.children:
        return node.value

    if maximizing_player:
        max_eval = float('-inf')
        for child in node.children:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  # Beta cut-off
        return max_eval
    else:
        min_eval = float('inf')
        for child in node.children:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  
        return min_eval

tree = GameTree(0, [
    GameTree(3, [GameTree(1), GameTree(2)]),
    GameTree(5, [GameTree(4)]),
    GameTree(6)
])

result = alpha_beta_pruning(tree, 3, float('-inf'), float('inf'), True)
print(f"The optimal value is: {result}")
