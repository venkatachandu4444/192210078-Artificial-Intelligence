def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_win(board, player):
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]], # Top row
        [board[1][0], board[1][1], board[1][2]], # Middle row
        [board[2][0], board[2][1], board[2][2]], # Bottom row
        [board[0][0], board[1][0], board[2][0]], # Left column
        [board[0][1], board[1][1], board[2][1]], # Middle column
        [board[0][2], board[1][2], board[2][2]], # Right column
        [board[0][0], board[1][1], board[2][2]], # Diagonal top-left to bottom-right
        [board[2][0], board[1][1], board[0][2]]  # Diagonal bottom-left to top-right
    ]
    return [player, player, player] in win_conditions

def check_draw(board):
    for row in board:
        if " " in row:
            return False
    return True

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"
    
    while True:
        print_board(board)
        print(f"Player {current_player}, enter your move (row and column): ")
        row, col = map(int, input().split())
        
        if board[row][col] != " ":
            print("This move is not valid. Try again.")
            continue

        board[row][col] = current_player

        if check_win(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break
        
        if check_draw(board):
            print_board(board)
            print("It's a draw!")
            break
        
        current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
    tic_tac_toe()
